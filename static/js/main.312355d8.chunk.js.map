{"version":3,"sources":["components/Messager.js","components/MessageItem.js","components/MessageList.js","components/UserInput.js","App.js","serviceWorker.js","index.js"],"names":["Messager","react_default","a","createElement","className","style","cursor","onClick","this","props","messagerChange","src","img","alt","width","height","name","message","length","content","timestamp","Component","MessageItem","concat","messageFromMe","MessageList","messager","index","map","item","components_MessageItem","key","UserInput","_this$props","messageChange","handleKeyDown","newMessage","onChange","onKeyDown","value","messagerData","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","messagerIndex","e","newInputMessage","target","console","log","keyCode","ts","Date","state","push","toISOString","substring","toString","_this2","components_Messager","bind","components_MessageList","components_UserInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.312355d8.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Messager extends Component {\r\n\r\n    render() {\r\n        const imgStyle={\r\n            width: \"50px\",\r\n            height:\" 50px\"\r\n        }\r\n        const pointer={\r\n            cursor: 'pointer'\r\n        }\r\n\r\n        return (\r\n            <div >\r\n                <li className=\"thread-item\" style={pointer} onClick={this.props.messagerChange}>\r\n                    <div className=\"clearfix\">\r\n                        <div className=\"thread-item_left\">\r\n                            <img className=\"img-circle img\"  src={this.props.img} alt=\"\"  style={imgStyle}/>\r\n                        </div>\r\n                        <div className=\"thread-item_right\">\r\n                            <div className=\"thread-from\">{this.props.name}</div>\r\n                            <div><span className=\"thread-content\">{this.props.message[this.props.message.length-1].content}</span></div>\r\n                            <span className=\"thread-time\">{this.props.message[this.props.message.length-1].timestamp}</span></div>\r\n                    </div>\r\n                </li>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messager;","import React, {Component} from 'react';\r\n\r\nclass MessageItem extends Component {\r\n    render() {\r\n        let style=`message-item  ${this.props.messageFromMe ? \"message-from-me\" : \"message-from-other\"}`;\r\n        return (\r\n            <div>\r\n                <div className={style} ><span >{this.props.content}</span></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageItem;\r\n","import React, {Component} from 'react';\r\nimport MessageItem from './MessageItem';\r\n\r\nclass MessageList extends Component {\r\n    render() {\r\n        const messager = this.props.message[this.props.index]\r\n\r\n        return (\r\n        <div>\r\n            {messager.message.map((item, index) => {\r\n                return (\r\n                    <MessageItem key={index}\r\n                                 messageFromMe={item.messageFromMe}\r\n                                 content={item.content} />\r\n                );\r\n            })}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageList;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass UserInput extends Component {\r\n\r\n    render() {\r\n        const {messageChange,handleKeyDown,newMessage} = this.props;\r\n        return (\r\n            <div  className=\"footer\">\r\n                    <input className=\"new-message\"\r\n                           onChange={messageChange}\r\n                           onKeyDown={handleKeyDown}\r\n                    value={newMessage}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserInput;","import React, {Component} from 'react';\nimport Messager from './components/Messager';\nimport MessageList from './components/MessageList';\nimport UserInput from './components/UserInput';\nimport  './static/App.css';\nimport  './index.css';\nconst messagerData= {\n\n  messager: [{\n    name: 'Elly', message: [\n          {timestamp: '2019-07-10 11:48:12 ', content: '來來來!!', messageFromMe:false},\n          {timestamp: '2019-07-10 11:48:24', content: '來甲本~', messageFromMe:false},\n          {timestamp: '2019-07-10 11:48:48', content: '要吃嗎?', messageFromMe: false},\n          {timestamp: '2019-07-10 11:49:50', content: '來甲本~', messageFromMe: true},\n          {timestamp: '2019-07-10 11:50:53', content: '約哪裡?', messageFromMe: true}\n        ], img: 'http://lorempixel.com/100/100/cats/3',\n  }, {\n    name: 'Mercy', message:\n        [\n          {timestamp: '2019-07-10 12:49:12 ', content: '我要報表!', messageFromMe:false},\n        ],\n    img: 'http://lorempixel.com/100/100/cats/2'\n  }, {\n      name: 'Cat', message:\n          [\n            {timestamp: '2019-07-10 10:12:12 ', content: '喵嗚～',messageFromMe:false},\n          ],\n      img: 'http://lorempixel.com/100/100/cats/5'\n    }],\n\n}\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      messagerData:messagerData,\n      messagerIndex:0,\n      newMessage:''\n    };\n  }\n  //select messager and change MessagerIndex for chatroom\n  messagerChange=(index)=> {\n      // console.log('index',index);\n      // console.log(this.state.messagerIndex);\n      this.setState({\n          messagerIndex: index ,\n          newMessage:''\n      });\n\n  }\n  //change newMessage\n    messageChange=(e)=>{\n        // console.log('messageChange:', e.target.value);\n        let newInputMessage = e.target.value;\n        this.setState({ newMessage: newInputMessage });\n    }\n\n    handleKeyDown=(e)=>{\n      console.log('handleKeyDown');\n        if(e.keyCode === 13 && e.target.value!==''){\n            let ts = new Date();\n            messagerData.messager[this.state.messagerIndex].message.push(\n                {timestamp: ts.toISOString().substring(0, 19)+'+08:00',\n                 content: e.target.value.toString(),\n                 messageFromMe:true\n                })\n            this.setState({\n                messagerData:messagerData,\n                newMessage:''\n            })\n        }\n    }\n    render() {\n        return (\n            <div>\n              <div className=\"chat-app clearfix\">\n\n                <div className=\"chat-app_left\">\n                  <div className=\"heading\"><h3 className=\"messenger-title\">Messager  {this.state.messagerIndex}</h3></div>\n                  <div className=\"thread-list\">\n                    {this.state.messagerData.messager.map((messager, index) => {\n                      return (\n                          <Messager className=\"Component-style\"\n                                    messagerChange={this.messagerChange.bind(this,index)}\n                                    key={index}\n                                    img={messager.img}\n                                    name={messager.name}\n                                    message={messager.message}/>\n                      );\n                    })}\n                  </div>\n                </div>\n                <div className=\"chat-app_right\">\n                  <div className=\"heading\">\n                    <div className=\"current-target\">{this.state.messagerData.messager[this.state.messagerIndex].name}</div>\n                  </div>\n                  <div className=\"message-list\">\n                    <MessageList message = {this.state.messagerData.messager}\n                                 index={this.state.messagerIndex}\n\n                    />\n                  </div>\n                    {<UserInput\n                            newMessage={this.state.newMessage}\n                            messageChange={this.messageChange.bind(this)}\n                            handleKeyDown={this.handleKeyDown.bind(this)}/>}\n                </div>\n              </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}