{"version":3,"sources":["components/Messager.js","components/Message.js","components/MessageList.js","components/UserInput.js","App.js","serviceWorker.js","index.js"],"names":["Messager","changeMessageIndex","messageIndex","_this","props","index","messagerChange","_this$props","this","name","img","message","react_default","a","createElement","className","style","cursor","onClick","src","alt","width","height","length","content","moment","tz","timestamp","format","Component","Message","messageFromMe","concat","MessageList","messager","map","item","components_Message","key","UserInput","newMessageChange","handleKeyDown","newMessage","onChange","onKeyDown","value","messagerData","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","state","messagerIndex","setState","e","target","newInputMessage","keyCode","taiwan","Date","push","toString","_this2","components_Messager","components_MessageList","components_UserInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9370e363.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport moment from 'moment-timezone';\r\n\r\n\r\nclass Messager extends Component {\r\n    //when click the messager change UI to the messager's message\r\n    changeMessageIndex=()=>{\r\n        let messageIndex = this.props.index;\r\n        this.props.messagerChange(messageIndex);\r\n    }\r\n    render() {\r\n        const imgStyle={\r\n            width: \"50px\",\r\n            height:\" 50px\"\r\n        }\r\n        const pointer={\r\n            cursor: 'pointer'\r\n        }\r\n        const {name,img,message}=this.props;\r\n        return (\r\n            <div >\r\n                <li className=\"thread-item\" style={pointer} onClick={this.changeMessageIndex}>\r\n                    <div className=\"clearfix\">\r\n                        <div className=\"thread-item_left\">\r\n                            <img className=\"img-circle img\"  src={img} alt=\"\"  style={imgStyle}/>\r\n                        </div>\r\n                        <div className=\"thread-item_right\">\r\n                            <div className=\"thread-from\">{name}</div>\r\n                            <div><span className=\"thread-content\">{message[message.length-1].content}</span></div>\r\n                            <span className=\"thread-time\">{moment.tz(message[message.length-1].timestamp, \"Asia/Taipei\").format()}</span></div>\r\n                    </div>\r\n                </li>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Messager;","import React, {Component} from 'react';\r\n\r\nclass Message extends Component {\r\n    render() {\r\n        const {messageFromMe,content} = this.props\r\n        let style=`message-item  ${messageFromMe ? \"message-from-me\" : \"message-from-other\"}`;\r\n        return (\r\n            <div>\r\n                <div className={style} ><span >{content}</span></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Message;\r\n","import React, {Component} from 'react';\r\nimport Message from './Message';\r\n\r\nclass MessageList extends Component {\r\n    render() {\r\n        //get current messager's  message\r\n        const messager = this.props.message[this.props.index]\r\n\r\n        return (\r\n        <div>\r\n            {messager.message.map((item, index) => {\r\n                return (\r\n                    <Message key={index}\r\n                             messageFromMe={item.messageFromMe}\r\n                             content={item.content} />\r\n                );\r\n            })}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MessageList;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nclass UserInput extends Component {\r\n\r\n    render() {\r\n        const {newMessageChange,handleKeyDown,newMessage} = this.props;\r\n        return (\r\n            <div  className=\"footer\">\r\n                    <input className=\"new-message\"\r\n                           onChange={newMessageChange}\r\n                           onKeyDown={handleKeyDown}\r\n                    value={newMessage}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserInput;","import React, {Component} from 'react';\r\nimport Messager from './components/Messager';\r\nimport MessageList from './components/MessageList';\r\nimport UserInput from './components/UserInput';\r\nimport  './static/App.css';\r\nimport  './index.css';\r\nimport moment from 'moment-timezone';\r\n\r\n//static message data\r\n\r\nconst messagerData= {\r\n  messager: [{\r\n    name: 'Elly', message: [\r\n          {timestamp: '2019-07-10 11:48:12', content: '來來來!!', messageFromMe:false},\r\n          {timestamp: '2019-07-10 11:48:24', content: '來甲本~', messageFromMe:false},\r\n          {timestamp: '2019-07-10 11:48:48', content: '要吃嗎?', messageFromMe: false},\r\n          {timestamp: '2019-07-10 11:49:50', content: '來甲本~', messageFromMe: true},\r\n          {timestamp: '2019-07-10 11:50:53', content: '約哪裡?', messageFromMe: true}\r\n        ], img: 'http://lorempixel.com/100/100/cats/3',\r\n  }, {\r\n    name: 'Mercy', message:\r\n        [\r\n          {timestamp: '2019-07-10 12:49:12', content: '我要報表!', messageFromMe:false},\r\n        ],\r\n    img: 'http://lorempixel.com/100/100/cats/2'\r\n  }, {\r\n      name: 'Cat', message:\r\n          [\r\n            {timestamp: '2019-07-10 10:12:12', content: '喵嗚～',messageFromMe:false},\r\n          ],\r\n      img: 'http://lorempixel.com/100/100/cats/5'\r\n    }],\r\n}\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      messagerData:messagerData,\r\n      //messager ID\r\n      messagerIndex:0,\r\n      newMessage:''\r\n    };\r\n  }\r\n  //select messager and change messagerIndex for chatroom and render the message UI\r\n  messagerChange=(index)=> {\r\n      console.log('messagerIndex',index);\r\n      //if select same messager\r\n      if(index === this.state.messagerIndex){\r\n          return;\r\n      }\r\n      this.setState({\r\n          messagerIndex: index ,\r\n          newMessage:''\r\n      });\r\n  }\r\n  //change newMessage\r\n    newMessageChange=(e)=>{\r\n      console.log('newMessageChange:', e.target.value);\r\n        let newInputMessage = e.target.value;\r\n        this.setState({ newMessage: newInputMessage });\r\n    }\r\n  // update messagerData and clear newMessage\r\n    handleKeyDown=(e)=>{\r\n      console.log('handleKeyDown',e.target.value);\r\n        if(e.keyCode === 13 && e.target.value!==''){\r\n            //use moment js to format current date\r\n            let  taiwan = moment.tz(new Date(), \"Asia/Taipei\").format();\r\n            //push new message to messager's message list\r\n            messagerData.messager[this.state.messagerIndex].message.push(\r\n                {/*timestamp: ts.toISOString().substring(0, 19)+'+08:00',*/\r\n                 timestamp:taiwan.toString(),\r\n                 content: e.target.value.toString(),\r\n                 messageFromMe:true\r\n                })\r\n            this.setState({\r\n                messagerData:messagerData,\r\n                newMessage:''\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n              <div className=\"chat-app clearfix\">\r\n                <div className=\"chat-app_left\">\r\n                  <div className=\"heading\"><h3 className=\"messenger-title\">Messager  </h3></div>\r\n                  <div className=\"thread-list\">\r\n                    {this.state.messagerData.messager.map((messager, index) => {\r\n                      return (\r\n                          <Messager className=\"Component-style\"\r\n                                    messagerChange={this.messagerChange}\r\n                                    key={index}\r\n                                    index={index}\r\n\r\n                                    img={messager.img}\r\n                                    name={messager.name}\r\n                                    message={messager.message}\r\n                          />\r\n                      );\r\n                    })}\r\n                  </div>\r\n                </div>\r\n                <div className=\"chat-app_right\">\r\n                  <div className=\"heading\">\r\n                    <div className=\"current-target\">{this.state.messagerData.messager[this.state.messagerIndex].name}</div>\r\n                  </div>\r\n                  <div className=\"message-list\">\r\n                    {/* who are you talking to  */}\r\n                    <MessageList message = {this.state.messagerData.messager}\r\n                                 index={this.state.messagerIndex}\r\n                    />\r\n                  </div>\r\n                    <UserInput\r\n                            newMessage={this.state.newMessage}\r\n                            newMessageChange={this.newMessageChange}\r\n                            handleKeyDown={this.handleKeyDown}\r\n                    />\r\n                </div>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}